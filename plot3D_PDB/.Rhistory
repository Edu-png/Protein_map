length(trait_10)
length(trait_10[sort(table(trait_10), decreasing = T) >= 17])
length(trait_10[sort(table(trait_10), decreasing = T) >= 10])
length(trait_10[sort(table(trait_10), decreasing = T) >= 17])
head(trait_10[sort(table(trait_10), decreasing = T) >= 17])
#trait_10_temp =  unlist((lapply(1:nchar(seq),function(x) substring(seq,x,x+9))))
#trait_10_temp = trait_10[!(nchar(trait_10) < 10)]
#has_trait = rep(1, length(trait_10))
#trait_10 = c(trait_10, trait_10_temp)
#}
length(trait_10)
length(unique(trait_10))
unique_trait_10 = unique(trait_10)
row_number = length(unique_trait_10)
col_number = length(proteins_ID)
df <- data.frame(matrix(data = 0, ncol = col_number, nrow = row_number))
colnames(df) <- proteins_ID
rownames(df) <- trait_10
rownames(df) <- unique_trait_10
df[1:4,1:4]
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,x+4))))
seq_1 = unlist(seqs[1])
seq_2 = unlist(seqs[2])
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,x+4))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,x+4))))
janelas_seq_1
janelas_seq_1[!(nchar(janelas_seq_1) < 5)]
janelas_seq_2[!(nchar(janelas_seq_2) < 5)]
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < 5)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < 5)]
janelas_seq_1_trim
janelas_seq_2_trim
length(janelas_seq_1_trim)
length(janelas_seq_2_trim)
janelas_seq_1_trim_length = length(janelas_seq_1_trim)
janelas_seq_2_trim_length = length(janelas_seq_2_trim)
intersect(janelas_seq_1_trim_length,
janelas_seq_2_trim_length)
setdiff(janelas_seq_1_trim_length,
janelas_seq_2_trim_length)
intersect(janelas_seq_2_trim_length,
janelas_seq_1_trim_length)
janelas_seq_2_trim_length %in% janelas_seq_1_trim_length
janelas_seq_1_trim_length %in% janelas_seq_2_trim_length
janelas_seq_1_trim_length
janelas_seq_1_trim %in% janelas_seq_2_trim
intersect(janelas_seq_1_trim, janelas_seq_2_trim)
length(intersect(janelas_seq_1_trim, janelas_seq_2_trim))
identicas = length(intersect(janelas_seq_1_trim, janelas_seq_2_trim))
identicas = length(intersect(janelas_seq_1_trim, janelas_seq_2_trim))
identicas/janelas_seq_1_trim_length
identicas/janelas_seq_1_trim_length*100
identicas/janelas_seq_2_trim_length*100
identicas/janelas_seq_2_trim_length
identicas/janelas_seq_2_trim_length*100
shiny::runApp('APP/sliding_window')
runApp('APP/sliding_window')
unlist(seqs[1])
unlist(seqs[1])
runApp('APP/sliding_window')
setwd("/Volumes/Untitled/")
setwd("/Volumes/Untitled/")
MHC_A0101<- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 1)
MHC_A0201 <- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 2)
library(dplyr)
proteinas = unique(c(MHC_A0101$Identity, MHC_A0201$Identity))
length(proteinas)
MHC_A0201$Identity
length(proteinas)
linhas = length(proteinas)
MHC_A0101$MHC
unique(factor( c(MHC_A0101$MHC, MHC_A0201$MHC)))
length(coluna_alelos_MHC)
coluna_alelos_MHC = unique(factor( c(MHC_A0101$MHC, MHC_A0201$MHC)))
coluna_alelos_MHC_tamanho = length(coluna_alelos_MHC)
coluna_alelos_MHC_tamanho
colunas = c("Nome_proteina", "tamanho_proteina", "Numero_de_epitopos_imunogenicos", "Alelos_epitopos_compartilhados")
analise_proteinas = data.frame(matrix(nrow = linhas, ncol = length(colunas), dimnames = list(NULL, colunas) ))
dim(analise_proteinas)
head(analise_proteinas)
analise_MHC_alelos = data.frame(matrix(ncol = coluna_alelos_MHC_tamanho, nrow = linhas, dimnames = list(proteinas, coluna_alelos_MHC)))
dim(analise_MHC_alelos)
head(analise_MHC_alelos)
MHC_A0201[1:4,]
MHC_A0201[1:4,]
MHC_A0201 %>% filter(Rank_EL_02 < 1.9)
head(analise_MHC_alelos)
head(analise_proteinas)
apply(MHC_A0201, 2, class)
as.numeric(MHC_A0201$Rank_EL_02)
MHC_A0201$Rank_EL_02 <- as.numeric(MHC_A0201$Rank_EL_02)
apply(MHC_A0201, 2, class)
head(analise_MHC_alelos)
head(MHC_A0201)
MHC_A0201 %>% filter(Rank_EL_02 < 1.9)
rank_A0201 <- MHC_A0201 %>% filter(Rank_EL_02 < 1.9)
rank_A0201[rank_A0201$Rank_EL_02 < 1,]
rank_A0201[rank_A0201$Rank_EL_02 > 1,]
rank_A0201[rank_A0201$Rank_EL_02 < 1.9,]
class(MHC_A0201)
as.data.frame(MHC_A0201)[1:4,]
apply(as.data.frame(MHC_A0201), 2, class)
library(readxl)
class(MHC_A0101)
MHC_A0101[1]
MHC_A0101[2]
MHC_A0101[[2]]
MHC_A0101[[3]]
MHC_A0101[[1]]
class(MHC_A0101)
apply(MHC_A0201, 2, class)
as.numeric(MHC_A0201$Rank_EL_02)
MHC_A0201$Rank_EL_02.1 <- as.numeric(MHC_A0201$Rank_EL_02)
apply(MHC_A0201, 2, class)
apply(MHC_A0201, 2, class)
rep("text",3)
MHC_A0101[1:2,]
c(rep("text",3), rep("numeric",5), c(rep("text",2),"numeric")
)
col_types = c(rep("text",3), rep("numeric",5), rep("text",2), rep("numeric",2))
c(rep("text",3), rep("numeric",5), rep("text",2), rep("numeric",2))
MHC_A0101<- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 1, col_types = c(rep("text",3), rep("numeric",5), rep("text",2), rep("numeric",2)))
apply(MHC_A0101, 2, class)
class(MHC_A0101)
sapply(MHC_A0101, 2, class)
sapply(MHC_A0101, class)
proteinas = unique(c(MHC_A0101$Identity, MHC_A0201$Identity))
length(proteinas)
linhas = length(proteinas)
coluna_alelos_MHC = unique(factor( c(MHC_A0101$MHC, MHC_A0201$MHC)))
coluna_alelos_MHC_tamanho = length(coluna_alelos_MHC)
colunas = c("Nome_proteina", "tamanho_proteina", "Numero_de_epitopos_imunogenicos", "Alelos_epitopos_compartilhados")
analise_proteinas = data.frame(matrix(nrow = linhas, ncol = length(colunas), dimnames = list(NULL, colunas) ))
dim(analise_proteinas)
head(analise_proteinas)
analise_MHC_alelos = data.frame(matrix(ncol = coluna_alelos_MHC_tamanho, nrow = linhas, dimnames = list(proteinas, coluna_alelos_MHC)))
dim(analise_MHC_alelos)
head(analise_MHC_alelos)
rank_A0201 <- MHC_A0201 %>% filter(Rank_EL_02 < 1.9)
rank_A0201
rank_A0201 <- MHC_A0201 %>% filter(Rank_EL_02 < 1.9)
rank_A0201 =NULL
rank_A0201 <- MHC_A0201 %>% filter(Rank_EL_02 < 1.9)
rank_A0201 = NULL
rank_teste <- MHC_A0101 %>% filter(Rank_EL_02 < 1.9)
rank_teste <- MHC_A0101[MHC_A0101$Rank_EL_01 < 1.9,]
rank_teste
rank_teste$Rank_EL_01 > 1
MHC_A0101$Rank_EL_01[1]
MHC_A0101$Rank_EL_01[1] < 1.9
MHC_A0101$Rank_EL_01[1] < 68000
MHC_A0101$Rank_EL_01 < 1.9
table(MHC_A0101$Rank_EL_01 < 1.9)
table(MHC_A0101$Rank_EL_01 < 1.9 & MHC_A0101$Rank_EL_01 > 1.0)
table(MHC_A0101$Rank_EL_01 < 5 & MHC_A0101$Rank_EL_01 > 1.0)
table(MHC_A0101$Rank_EL_01 < 50 & MHC_A0101$Rank_EL_01 > 1.0)
table(MHC_A0101$Rank_EL_01 < 500 & MHC_A0101$Rank_EL_01 > 1.0)
table(MHC_A0101$Rank_EL_01 < 5000 & MHC_A0101$Rank_EL_01 > 1.0)
table(MHC_A0101$Rank_EL_01 < 1000 & MHC_A0101$Rank_EL_01 > 1.0)
MHC_A0101[77,]
MHC_A0101[77,"Rank_EL_01"]
MHC_A0101[76,"Rank_EL_01"]
MHC_A0101[76,"Rank_EL_01"] > 2
MHC_A0101[76,"Rank_EL_01"] > 1000
MHC_A0101_teste = MHC_A0101
apply(MHC_A0101_teste, 2, class)
MHC_A0101_teste[]=lapply(MHC_A0101_teste,type.convert,as.is=TRUE)
apply(MHC_A0101_teste, 2, class)
MHC_A0101[76,"Rank_EL_01"] > 1000
MHC_A0101[76,"Rank_EL_01"]
library(xlsx)
install.packages("xlsx")
library(xlsx)
MHC_A0101_teste = read.xlsx("Alelos_h_pilory_.xlsx", sheetIndex =  1)
MHC_A0101_teste = read.xlsx("Alelos_h_pilory_.xlsx", sheetIndex =  1)
MHC_A0101_teste = read.xlsx("Alelos_h_pilory_.xlsx", sheetIndex =  1)
MHC_A0101_teste = read.xlsx2("Alelos_h_pilory_.xlsx", sheetIndex =  1)
MHC_A0101_teste = read_excel("Alelos_h_pilory_.xlsx", sheetIndex =  1)
MHC_A0101_teste = read_xls("Alelos_h_pilory_.xlsx", sheetIndex =  1)
MHC_A0101_teste = read_excel("Alelos_h_pilory_.xlsx", sheet =  1)
MHC_A0101_teste[1:4,]
table(MHC_A0101_teste$Rank_EL_01 < 1000 & MHC_A0101_teste$Rank_EL_01 > 1.0)
MHC_A0101_teste[76,"Rank_EL_01"]
MHC_A0101<- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 1, col_types = c("guess"))
sapply(MHC_A0101$Rank_EL_01, class)
apply(MHC_A0101,2, class)
class(MHC_A0101)
class(MHC_A0101[3])
class(MHC_A0101[,3])
class(MHC_A0101[[3]])
class(MHC_A0101$Rank_EL_01)
class(MHC_A0101)
as.data.frame(MHC_A0101[1:4,])
as.data.frame(MHC_A0101[70:80,])
MHC_A0101<- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 1)
as.data.frame(MHC_A0101[70:80,])
as.data.frame.array(MHC_A0101[70:80,])
as.matrix(MHC_A0101[70:80,])
MHC_A0101<- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 1)
as.matrix(MHC_A0101[70:80,])
MHC_A0101<- readxl::read_xlsx("Alelos_h_pilory_.xlsx", sheet = 1)
as.matrix(MHC_A0101[70:80,])
as.matrix(MHC_A0101[50:60,])
MHC_A0101_teste = read.csv("/Users/leandrofreitas/Downloads/teste.csv")
MHC_A0101_teste
MHC_A0101_teste = read.csv("/Users/leandrofreitas/Downloads/teste.csv", sep = ";")
MHC_A0101_teste
MHC_A0101_teste[MHC_A0101_teste$X.Rank_EL.BindLevel < 1.9,]
runApp('Downloads/APP/sliding_window')
shiny::runApp('Downloads/APP/sliding_window')
runApp('Downloads/APP/sliding_window')
library(RecordLinkage)
install.packages("RecordLinkage")
library(RecordLinkage)
levenshteinSim("apple", "apple")
levenshteinSim("apple", "aaple")
levenshteinSim("MGRTV", "MGRTV")
levenshteinSim("MGRTV", "MGRTR")
levenshteinSim("MGRTV", "MGRTR", "MGRTV")
sapply(seq1, levenshteinSim)
seq1 = c("MGRTV","GRTVV","RTVVG","TVVGA")
seq2 = c("MGRTV","GRTVV","RTVVG","TVVGA")
sapply(seq1, levenshteinSim)
sapply(seq1,seq2, levenshteinSim)
sapply(seq1,seq2, FUN = levenshteinSim)
sapply(seq1, FUN = levenshteinSim)
sapply(seq1,seq2, FUN = levenshteinSim)
mean(sapply(seq1,seq2, FUN = levenshteinSim))
sapply(seq1,seq2, FUN = levenshteinSim) > 0.6
sapply(seq1,seq2, FUN = levenshteinSim) > 0.5
seq2 = c("MGRTV","GRTVV","RTVVG","TVVGA", "TVVGA")
sapply(seq1,seq2, FUN = levenshteinSim)
seq2 = c("MGRTE","GRTVV","RTVVG","TVVGA", "TVVGA")
sapply(seq1,seq2, FUN = levenshteinSim)
1/c(3,4,5,6)
runApp('Downloads/APP/sliding_window')
sapply(seq1,seq2, FUN = levenshteinSim)
sapply(seq1,seq2, FUN = levenshteinSim) >= 1
sum(sapply(seq1,seq2, FUN = levenshteinSim) >= 1)
runApp('Downloads/APP/sliding_window')
seq1 = c("MGRTV","GRTVV","RTVVG","TVVGA")
seq2 = c("MGRTE","GRTVV","RTVVG","TVVGA", "TVVGA")
sum(sapply(seq1,seq2, FUN = levenshteinSim) >= 1)
sapply(seq1,seq2, FUN = levenshteinSim)
matriz = sapply(seq1,seq2, FUN = levenshteinSim)
lower.tri(matriz)
upper.tri(matriz)
seq2 = c("MGRTV","GRTVV","RTVVG","TVVGA", "TVVGA")
matriz = sapply(seq1,seq2, FUN = levenshteinSim)
matriz
upper.tri(matriz)
upper.tri(matriz, diag = T)
lower.tri(matriz, diag = T)
matriz[upper.tri(matriz, diag = T)]
seq_1 = "MGRTVVGASRMFWLTHFVPLLLALRPNEPAHALAPGSSRVELFKRQNSTVPFEENGEVRQRVVHSFRLPALVNVDGVMVAIADARYDTSNDNSLIDTVVKYSVDDGETWETQIAIKNSRVSSASRVVDPTVIVKGNKIYVLVGSYNSSRSYWTAHGARVNCPVLSGEAMSQQCFPHGIVAVGTGLTVFDQRQQQPRLAGAQL"
seq_2 = "MGKTVVGASRMFWLMFFVPLLLALCPSEPAHALAPESSRVELFKRQSSKVPFEKDGKVTERVVHSFRLPALVNVDGVMVAIADARYETSNDNSLIDTVAKYSVDDGETWETQIAIKNSRASSVSRVVDPTVIVKGNKLYVLVGSYNSSRSYWTSHGDARDWDILLAVGEVTKSTAGGKTTASIKWGSPVSLKKFFPAEMEGMHTNQFLGGAGVAIVASNGNLVYPVQVTNKKKQVFSKIFYSEDEGKTWKFGKGRSDFGCSEPVALEWEGKLIINTRVDWTRRLVYESSDMGNTWVEAVGTLSRVWGPSPKSDQPGSQSSFTAVTIEGMRVMLFTHPLNFKGRWLRDRLNLWLTDNQRIYNVGQVSIGDENSAYSSVLYKDDKLYCLHEINTNEVYSLVFARLVGELRIIKSVLQSWKNWDSHLSSICTPADPAASSSERGCGPAVTTVGLVGFLSGNASQNVWEDAYRCVNASTANAERVPNGLKFAGVGGGALWPVSQQGQNQRYRFANHAFTLVASVTIHEAPRDATPLLGASLDSSGGKKLLGLSYDEKHQWQPIYGSTPVTPTGSWETGKRYHVVLTMSNKIGSVYIDGEPLEGSGQTVVPDGRTPDISHFYVGGYKRSDMPTISHVTVNNVLLYNRQLNAEEIRTLFLSQDLIGTEAHMDSSSDSSAHGTPSIPVDSSAHGTPSTPVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGKPSTPVDSSAHGTPSTPVDSSAHSTPSTPADSSAHSTPSTPAGNGANGTVLILPDGAALSAFSGGGLLLCACALLLHVFFTAVFF"
user_window = 4
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,(x+user_window-1)))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,(x+user_window-1)))))
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < user_window)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < user_window)]
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
matriz
similaridade = matriz[upper.tri(matriz, diag = T)]
similaridade
sum(similaridade >= 1)
similaridade = sum(similaridade >= 1)
similaridade/janelas_seq_2_trim_length*100
janelas_seq_1_trim_length = length(janelas_seq_1_trim)
janelas_seq_2_trim_length = length(janelas_seq_2_trim)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
similaridade = sum(similaridade >= 0.75)
janelas_seq_1_trim_length = length(janelas_seq_1_trim)
janelas_seq_2_trim_length = length(janelas_seq_2_trim)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
runApp('Downloads/APP/sliding_window')
seq_1 = "MGRTVVGASRMFWLTHFVPLLLALRPNEPAHALAPGSSRVELFKRQNSTVPFEENGEVRQRVVHSFRLPALVNVDGVMVAIADARYDTSNDNSLIDTVVKYSVDDGETWETQIAIKNSRVSSASRVVDPTVIVKGNKIYVLVGSYNSSRSYWTAHGARVNCPVLSGEAMSQQCFPHGIVAVGTGLTVFDQRQQQPRLAGAQL"
seq_2 = "MGKTVVGASRMFWLMFFVPLLLALCPSEPAHALAPESSRVELFKRQSSKVPFEKDGKVTERVVHSFRLPALVNVDGVMVAIADARYETSNDNSLIDTVAKYSVDDGETWETQIAIKNSRASSVSRVVDPTVIVKGNKLYVLVGSYNSSRSYWTSHGDARDWDILLAVGEVTKSTAGGKTTASIKWGSPVSLKKFFPAEMEGMHTNQFLGGAGVAIVASNGNLVYPVQVTNKKKQVFSKIFYSEDEGKTWKFGKGRSDFGCSEPVALEWEGKLIINTRVDWTRRLVYESSDMGNTWVEAVGTLSRVWGPSPKSDQPGSQSSFTAVTIEGMRVMLFTHPLNFKGRWLRDRLNLWLTDNQRIYNVGQVSIGDENSAYSSVLYKDDKLYCLHEINTNEVYSLVFARLVGELRIIKSVLQSWKNWDSHLSSICTPADPAASSSERGCGPAVTTVGLVGFLSGNASQNVWEDAYRCVNASTANAERVPNGLKFAGVGGGALWPVSQQGQNQRYRFANHAFTLVASVTIHEAPRDATPLLGASLDSSGGKKLLGLSYDEKHQWQPIYGSTPVTPTGSWETGKRYHVVLTMSNKIGSVYIDGEPLEGSGQTVVPDGRTPDISHFYVGGYKRSDMPTISHVTVNNVLLYNRQLNAEEIRTLFLSQDLIGTEAHMDSSSDSSAHGTPSIPVDSSAHGTPSTPVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGKPSTPVDSSAHGTPSTPVDSSAHSTPSTPADSSAHSTPSTPAGNGANGTVLILPDGAALSAFSGGGLLLCACALLLHVFFTAVFF"
user_window = 4
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,(x+user_window-1)))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,(x+user_window-1)))))
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < user_window)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < user_window)]
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
similaridade = matriz[upper.tri(matriz, diag = T)]
similaridade = sum(similaridade >= 0.5)
janelas_seq_1_trim_length = length(janelas_seq_1_trim)
janelas_seq_2_trim_length = length(janelas_seq_2_trim)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
similaridade = matriz[lower.tri(matriz, diag = T)]
similaridade = sum(similaridade >= 0.5)
janelas_seq_1_trim_length = length(janelas_seq_1_trim)
janelas_seq_2_trim_length = length(janelas_seq_2_trim)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
dim(matriz)
length(similaridade)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
length(similaridade)
sum(similaridade >= 0.5)
seq_1 = "MGRTVVGASRMFWLTHFVPLLLALRPNEPAHALAPGSSRVELFKRQNSTVPFEENGEVRQRVVHSFRLPALVNVDGVMVAIADARYDTSNDNSLIDTVVKYSVDDGETWETQIAIKNSRVSSASRVVDPTVIVKGNKIYVLVGSYNSSRSYWTAHGARVNCPVLSGEAMSQQCFPHGIVAVGTGLTVFDQRQQQPRLAGAQL"
seq_2 = "MGKTVVGASRMFWLMFFVPLLLALCPSEPAHALAPESSRVELFKRQSSKVPFEKDGKVTERVVHSFRLPALVNVDGVMVAIADARYETSNDNSLIDTVAKYSVDDGETWETQIAIKNSRASSVSRVVDPTVIVKGNKLYVLVGSYNSSRSYWTSHGDARDWDILLAVGEVTKSTAGGKTTASIKWGSPVSLKKFFPAEMEGMHTNQFLGGAGVAIVASNGNLVYPVQVTNKKKQVFSKIFYSEDEGKTWKFGKGRSDFGCSEPVALEWEGKLIINTRVDWTRRLVYESSDMGNTWVEAVGTLSRVWGPSPKSDQPGSQSSFTAVTIEGMRVMLFTHPLNFKGRWLRDRLNLWLTDNQRIYNVGQVSIGDENSAYSSVLYKDDKLYCLHEINTNEVYSLVFARLVGELRIIKSVLQSWKNWDSHLSSICTPADPAASSSERGCGPAVTTVGLVGFLSGNASQNVWEDAYRCVNASTANAERVPNGLKFAGVGGGALWPVSQQGQNQRYRFANHAFTLVASVTIHEAPRDATPLLGASLDSSGGKKLLGLSYDEKHQWQPIYGSTPVTPTGSWETGKRYHVVLTMSNKIGSVYIDGEPLEGSGQTVVPDGRTPDISHFYVGGYKRSDMPTISHVTVNNVLLYNRQLNAEEIRTLFLSQDLIGTEAHMDSSSDSSAHGTPSIPVDSSAHGTPSTPVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGKPSTPVDSSAHGTPSTPVDSSAHSTPSTPADSSAHSTPSTPAGNGANGTVLILPDGAALSAFSGGGLLLCACALLLHVFFTAVFF"
user_window = 4
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,(x+user_window-1)))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,(x+user_window-1)))))
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < user_window)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < user_window)]
dim(matriz)
seq_1 = "MGRTVVGASRMFWLTHFVPLLLALRPNEPAHALAPGSSRVELFKRQNSTVPFEENGEVRQRVVHSFRLPALVNVDGVMVAIADARYDTSNDNSLIDTVVKYSVDDGETWETQIAIKNSRVSSASRVVDPTVIVKGNKIYVLVGSYNSSRSYWTAHGARVNCPVLSGEAMSQQCFPHGIVAVGTGLTVFDQRQQQPRLAGAQL"
seq_2 = "MGKTVVGASRMFWLMFFVPLLLALCPSEPAHALAPESSRVELFKRQSSKVPFEKDGKVTERVVHSFRLPALVNVDGVMVAIADARYETSNDNSLIDTVAKYSVDDGETWETQIAIKNSRASSVSRVVDPTVIVKGNKLYVLVGSYNSSRSYWTSHGDARDWDILLAVGEVTKSTAGGKTTASIKWGSPVSLKKFFPAEMEGMHTNQFLGGAGVAIVASNGNLVYPVQVTNKKKQVFSKIFYSEDEGKTWKFGKGRSDFGCSEPVALEWEGKLIINTRVDWTRRLVYESSDMGNTWVEAVGTLSRVWGPSPKSDQPGSQSSFTAVTIEGMRVMLFTHPLNFKGRWLRDRLNLWLTDNQRIYNVGQVSIGDENSAYSSVLYKDDKLYCLHEINTNEVYSLVFARLVGELRIIKSVLQSWKNWDSHLSSICTPADPAASSSERGCGPAVTTVGLVGFLSGNASQNVWEDAYRCVNASTANAERVPNGLKFAGVGGGALWPVSQQGQNQRYRFANHAFTLVASVTIHEAPRDATPLLGASLDSSGGKKLLGLSYDEKHQWQPIYGSTPVTPTGSWETGKRYHVVLTMSNKIGSVYIDGEPLEGSGQTVVPDGRTPDISHFYVGGYKRSDMPTISHVTVNNVLLYNRQLNAEEIRTLFLSQDLIGTEAHMDSSSDSSAHGTPSIPVDSSAHGTPSTPVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGKPSTPVDSSAHGTPSTPVDSSAHSTPSTPADSSAHSTPSTPAGNGANGTVLILPDGAALSAFSGGGLLLCACALLLHVFFTAVFF"
user_window = 4
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,(x+user_window-1)))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,(x+user_window-1)))))
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < user_window)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < user_window)]
dim(matriz)
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
dim(matriz)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
similaridade = matriz[upper.tri(matriz, diag = T)]
length(similaridade)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
sum(similaridade >= 1)
similaridade = sum(similaridade >= 1)
#janelas_seq_1_trim_length = length(similaridade)
janelas_seq_2_trim_length = length(similaridade)
similaridade/janelas_seq_2_trim_length*100
janelas_seq_2_trim_length
length(similaridade)
sum(similaridade >= 1)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
sum(similaridade >= 1)
similaridade = sum(similaridade >= 1)
#janelas_seq_1_trim_length = length(similaridade)
janelas_seq_2_trim_length = length(similaridade)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
similaridade
janelas_seq_2_trim_length
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
similaridade = sum(similaridade >= 1)
similaridade
#janelas_seq_1_trim_length = length(similaridade)
janelas_seq_2_trim_length = length(similaridade)
similaridade
similaridade/janelas_seq_2_trim_length*100
janelas_seq_2_trim_length
length(similaridade)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
similaridade = sum(similaridade >= 1)
similaridade
length(similaridade)
length(similaridade)
sum(similaridade >= 1)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
sum(similaridade >= 1)
janelas_seq_2_trim_length = length(similaridade)
similaridade = sum(similaridade >= 1)
similaridade
janelas_seq_2_trim_length
similaridade/janelas_seq_2_trim_length
similaridade/janelas_seq_2_trim_length*100
janelas_seq_2_trim_length
user_window = 6
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,(x+user_window-1)))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,(x+user_window-1)))))
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < user_window)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < user_window)]
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
dim(matriz)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
janelas_seq_2_trim_length = length(similaridade)
similaridade = sum(similaridade >= 1)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
similaridade/935*100
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
dim(matriz)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
janelas_seq_2_trim_length = length(similaridade)
1/6
*4
1/6*4
similaridade = sum(similaridade >= 0.66)
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
dim(matriz)
similaridade = matriz[lower.tri(matriz, diag = T)]
length(similaridade)
janelas_seq_2_trim_length = length(similaridade)
similaridade = sum(similaridade >= 0.66)
resultado_seq2 = similaridade/janelas_seq_2_trim_length*100
resultado_seq2
similaridade/935*100
seq_1 = "MGRTVVGASRMFWLTHFVPLLLALRPNEPAHALAPGSSRVELFKRQNSTVPFEENGEVRQRVVHSFRLPALVNVDGVMVAIADARYDTSNDNSLIDTVVKYSVDDGETWETQIAIKNSRVSSASRVVDPTVIVKGNKIYVLVGSYNSSRSYWTAHGARVNCPVLSGEAMSQQCFPHGIVAVGTGLTVFDQRQQQPRLAGAQL"
seq_2 = "MGKTVVGASRMFWLMFFVPLLLALCPSEPAHALAPESSRVELFKRQSSKVPFEKDGKVTERVVHSFRLPALVNVDGVMVAIADARYETSNDNSLIDTVAKYSVDDGETWETQIAIKNSRASSVSRVVDPTVIVKGNKLYVLVGSYNSSRSYWTSHGDARDWDILLAVGEVTKSTAGGKTTASIKWGSPVSLKKFFPAEMEGMHTNQFLGGAGVAIVASNGNLVYPVQVTNKKKQVFSKIFYSEDEGKTWKFGKGRSDFGCSEPVALEWEGKLIINTRVDWTRRLVYESSDMGNTWVEAVGTLSRVWGPSPKSDQPGSQSSFTAVTIEGMRVMLFTHPLNFKGRWLRDRLNLWLTDNQRIYNVGQVSIGDENSAYSSVLYKDDKLYCLHEINTNEVYSLVFARLVGELRIIKSVLQSWKNWDSHLSSICTPADPAASSSERGCGPAVTTVGLVGFLSGNASQNVWEDAYRCVNASTANAERVPNGLKFAGVGGGALWPVSQQGQNQRYRFANHAFTLVASVTIHEAPRDATPLLGASLDSSGGKKLLGLSYDEKHQWQPIYGSTPVTPTGSWETGKRYHVVLTMSNKIGSVYIDGEPLEGSGQTVVPDGRTPDISHFYVGGYKRSDMPTISHVTVNNVLLYNRQLNAEEIRTLFLSQDLIGTEAHMDSSSDSSAHGTPSIPVDSSAHGTPSTPVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHGTPSTPVDSSAHGTPSTTVDSSAHATPSTPVDSSAHSTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGTPSTPVDSSAHGKPSTPVDSSAHGTPSTPVDSSAHSTPSTPADSSAHSTPSTPAGNGANGTVLILPDGAALSAFSGGGLLLCACALLLHVFFTAVFF"
user_window = 6
janelas_seq_1 =  unlist((lapply(1:nchar(seq_1),function(x) substring(seq_1,x,(x+user_window-1)))))
janelas_seq_2 =  unlist((lapply(1:nchar(seq_2),function(x) substring(seq_2,x,(x+user_window-1)))))
janelas_seq_1_trim = janelas_seq_1[!(nchar(janelas_seq_1) < user_window)]
janelas_seq_2_trim = janelas_seq_2[!(nchar(janelas_seq_2) < user_window)]
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
dim(matriz)
similaridade = matriz[upper.tri(matriz, diag = T)]
length(similaridade)
janelas_seq_1_trim_length = length(similaridade)
janelas_seq_1_trim_length
sum(similaridade >= 0.66)
similaridade = sum(similaridade >= 0.66)
resultado_seq1 = similaridade/janelas_seq_1_trim_length*100
resultado_seq1
similaridade/197*100
length(similaridade)
matriz[upper.tri(matriz, diag = T)]
matriz = sapply(janelas_seq_1_trim,janelas_seq_2_trim, FUN = levenshteinSim)
dim(matriz)
similaridade = matriz[upper.tri(matriz, diag = T)]
length(similaridade)
janelas_seq_1_trim_length = length(similaridade)
similaridade = sum(similaridade >= 0.66)
resultado_seq1 = similaridade/janelas_seq_1_trim_length*100
resultado_seq1
similaridade/197*100
resultado_seq1*100
similaridade = sum(similaridade >= 1)
resultado_seq1 = similaridade/janelas_seq_1_trim_length*100
resultado_seq1*100
similaridade/197*100
resultado_seq2
similaridade/935*100
similaridade
runApp('Downloads/APP/sliding_window')
1/6
1/6*1
1/6*6
1/6*6
1/6*5
1/6*4
runApp('Downloads/APP/sliding_window')
65/142
65/147
runApp('Downloads/PENDRIVE_VERMELHO/Shiny/FirstApp/app7.R')
runApp('Downloads/KEGG_Erico.R')
runApp('Downloads/PENDRIVE_VERMELHO/Shiny/FirstApp/KEGG_Erico.R')
runApp('Downloads/PENDRIVE_VERMELHO/Shiny/FirstApp/app7.R')
library(shiny); runApp('Downloads/PENDRIVE_VERMELHO/Shiny/FirstApp/KEGG_Erico.R')
shiny::runApp('Downloads/Sliding window')
runApp('Downloads/APP/sliding_window')
runApp('Downloads/Sliding window')
X = rnorm(n = 100, mean = 0, sd = 1)
Y = rnorm(n = 100, mean = 2, sd = 1.5)
Z = rnorm(n = 100, mean = 5, sd = 1.5)
X = rnorm(n = 100, mean = 0, sd = 1)
Y = rnorm(n = 100, mean = 2, sd = 1.5)
Z = rnorm(n = 100, mean = 5, sd = 1.5)
df <- data.frame(X=X,
Y=Y,
Z=Z)
plot3d(df$X, df$Y, df$Z, type="s", size=1, lit=TRUE, main = "Car Weight Vs Engine Displacement Vs Mileage",sub="3-D Plot")
library(rgl)
plot3d(df$X, df$Y, df$Z, type="s", size=1, lit=TRUE, main = "Car Weight Vs Engine Displacement Vs Mileage",sub="3-D Plot")
runApp('Downloads/APP/plot3D')
ggdiamonds <- ggplot(df, aes(X,Y,Z)) +
geom_point() +
theme_bw() +
scale_size_continuous(range = c(2, 6)) +
scale_colour_viridis_c(option = "inferno")
ggdiamonds <- ggplot(df, aes(X,Y,Z)) +
geom_point() +
theme_bw() +
scale_size_continuous(range = c(2, 6)) +
scale_colour_viridis_c(option = "inferno")
library(ggplot2)
ggdiamonds <- ggplot(df, aes(X,Y,Z)) +
geom_point() +
theme_bw() +
scale_size_continuous(range = c(2, 6)) +
scale_colour_viridis_c(option = "inferno")
ggdiamonds
ggdiamonds <- ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() +
axes_3D() +
stat_3D()
library("gg3D")
install.packages("gg3d")
devtools::install_github("AckerDWM/gg3D")
library("gg3D")
ggdiamonds <- ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() +
axes_3D() +
stat_3D()
ggdiamonds
runApp('Downloads/APP/plot3D')
runApp('Downloads/APP/plot3D')
library(car)
library(car)
runApp('Downloads/APP/plot3D')
cars$speed
length(cars$speed)
length(cars$dist)
runApp('Downloads/APP/plot3D')
